// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iqYHqr3pWfj21KAZNGZebV
// Component: 2BxzMSVYdCEk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: X0bdkv4xmtEE/component
import Button from "../../Button"; // plasmic-import: IKalveoma9Lb/component
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import Section from "../../Section"; // plasmic-import: ugejia25uuRX/component
import FeatureDomainLink from "../../FeatureDomainLink"; // plasmic-import: I8KS5uaZZ564/component
import FeatureCustomerSupport from "../../FeatureCustomerSupport"; // plasmic-import: U_J8NNhBz4xx/component
import FeatureEmailClient from "../../FeatureEmailClient"; // plasmic-import: idYTpKrgILpV/component
import FeatureAutoBurn from "../../FeatureAutoBurn"; // plasmic-import: 0HkxE5m16msS/component
import PriceSection from "../../PriceSection"; // plasmic-import: aZ_oilqttiCe/component
import PriceCard from "../../PriceCard"; // plasmic-import: 9tRKoAxzr92y/component
import FooterSection from "../../FooterSection"; // plasmic-import: pJ7Xt-Q9Heqm/component

import { useScreenVariants as useScreenVariantsd2PrltSkvuJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d2prlt-skvuJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: iqYHqr3pWfj21KAZNGZebV/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 2BxzMSVYdCEk/css

import IconArrowRightSvgIcon from "./icons/PlasmicIcon__IconArrowRightSvg"; // plasmic-import: uVrPiJTwk2Jd/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerHeroSection?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  diagramSection?: Flex__<typeof Section>;
  deviceSection?: Flex__<typeof Section>;
  gallerySection?: Flex__<typeof Section>;
  productSection?: Flex__<typeof Section>;
  featureDomainLink?: Flex__<typeof FeatureDomainLink>;
  featureCustomerSupport?: Flex__<typeof FeatureCustomerSupport>;
  featureEmailClient?: Flex__<typeof FeatureEmailClient>;
  featureAutoBurn?: Flex__<typeof FeatureAutoBurn>;
  aboutSection?: Flex__<typeof Section>;
  priceSection?: Flex__<typeof PriceSection>;
  startSection?: Flex__<typeof Section>;
  h3?: Flex__<"h3">;
  pricingSection?: Flex__<typeof Section>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd2PrltSkvuJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__av5Pj)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__otIrP)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gavgk)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__yYzSu
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "The Premier Email Service."
                      : "The Premier Email Service."}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iie9J
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Blumemail is the premier email service for everybody. We\u2019re talking business, yourself, projects or honestly anything."
                      : "Blumemail is the premier email service for everybody. We\u2019re talking business, yourself, projects or honestly anything."}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w27Q)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__bOoal
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "blueSmall"
                          : "blue"
                      }
                      endIcon={
                        <IconArrowRightSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4UbMs
                          )}
                          role={"img"}
                        />
                      }
                      link={"#"}
                      showEndIcon={true}
                      startIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___6UZ6K
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qoa8N
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Try Demo For Free"
                          : "Get Blumemail"}
                      </div>
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__eo1JJ
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "blueBorderSmall"
                          : "blueBorder"
                      }
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__yzof)}
                          role={"img"}
                        />
                      }
                      link={"#"}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__nzu1Y)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mrBdB
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Learn More"
                          : "Login to Webmail"}
                      </div>
                    </Button>
                  </Stack__>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__t6BnM)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xqmFr
                        )}
                        color={"blueBorder"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__nYs3M
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__my0Ks
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        {"Learn More"}
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gb90N
                        )}
                        color={"blueBorder"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__sTzmN
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tnKtW
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        {"Learn More"}
                      </Button>
                    </div>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eYexS)}>
                  <Tilt
                    className={classNames("__wab_instance", sty.tilt__lAcF)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__u21Wr)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "0px"
                          : "0"
                      }
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/blumemail_landing_website_new/images/logoInSilverSvg.svg",
                        fullWidth: 345,
                        fullHeight: 275,
                        aspectRatio: 1.254545
                      }}
                    />
                  </Tilt>
                </div>
              </Stack__>
            </div>
          </Stack__>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__pcyUt)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blumemail_landing_website_new/images/diagramImgSvg.svg",
              fullWidth: 300,
              fullHeight: 100,
              aspectRatio: 2.987552
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__oRj6K)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"774px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blumemail_landing_website_new/images/ellipseLeftPng.png",
              fullWidth: 469,
              fullHeight: 742,
              aspectRatio: undefined
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__i7Sas)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blumemail_landing_website_new/images/ellipseRightPng.png",
              fullWidth: 437,
              fullHeight: 742,
              aspectRatio: undefined
            }}
          />

          <Section
            data-plasmic-name={"diagramSection"}
            data-plasmic-override={overrides.diagramSection}
            className={classNames("__wab_instance", sty.diagramSection)}
            size={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "mobile"
                : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__dPgGz)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__uiCYa
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Email Simply done better."
                  : "Email Simply done better."}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hSrqD
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "\nMore privacy, simplicity and worry-free days with Blumemail."
                  : "\nMore privacy, simplicity and worry-free days with Blumemail."}
              </div>
              <Tilt className={classNames("__wab_instance", sty.tilt__dFSM)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__drVVk)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "143px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "249px"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "275px"
                      : "962px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blumemail_landing_website_new/images/email1Svg.svg",
                    fullWidth: 627,
                    fullHeight: 326,
                    aspectRatio: 1.923313
                  }}
                />
              </Tilt>
            </div>
          </Section>
          <Section
            data-plasmic-name={"deviceSection"}
            data-plasmic-override={overrides.deviceSection}
            background={"dark"}
            className={classNames("__wab_instance", sty.deviceSection)}
            size={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "mobile"
                : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__uk7Kr)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__zEsmN
                )}
              >
                {"Customer Support that just does better."}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kzWo0
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "\nHave any questions? Or any issues. Our team can easily resolve it in under an hour.\nAnd did I also forget that we've got agents all around the world?\n\nand it's included in all of our plans."
                  : "\nHave any questions? Or any issues. Our team can easily resolve it in under an hour.\nAnd did I also forget that we've got agents all around the world?\n\nand it's included in all of our plans."}
              </div>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__aRbBl)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "360px"
                  : "100%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/blumemail_landing_website_new/images/macbookPng.png",
                fullWidth: 900,
                fullHeight: 565,
                aspectRatio: undefined
              }}
            />
          </Section>
          <Section
            data-plasmic-name={"gallerySection"}
            data-plasmic-override={overrides.gallerySection}
            className={classNames("__wab_instance", sty.gallerySection)}
            size={"fullContentGallery"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__huRss)}>
              <div className={classNames(projectcss.all, sty.columns__vx1Ek)} />
            </div>
          </Section>
          <Section
            data-plasmic-name={"productSection"}
            data-plasmic-override={overrides.productSection}
            className={classNames("__wab_instance", sty.productSection)}
            size={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "mobile"
                : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__r9OTr)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__gir5A
                )}
              >
                {"Discover our features."}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o3ZQ7
                )}
              >
                {"With Blumemail, you get a ton of features including these!"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5RTP)}
              >
                <FeatureDomainLink
                  data-plasmic-name={"featureDomainLink"}
                  data-plasmic-override={overrides.featureDomainLink}
                  className={classNames(
                    "__wab_instance",
                    sty.featureDomainLink
                  )}
                />

                <FeatureCustomerSupport
                  data-plasmic-name={"featureCustomerSupport"}
                  data-plasmic-override={overrides.featureCustomerSupport}
                  className={classNames(
                    "__wab_instance",
                    sty.featureCustomerSupport
                  )}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3ZhH2)}
              >
                <FeatureEmailClient
                  data-plasmic-name={"featureEmailClient"}
                  data-plasmic-override={overrides.featureEmailClient}
                  className={classNames(
                    "__wab_instance",
                    sty.featureEmailClient
                  )}
                />

                <FeatureAutoBurn
                  data-plasmic-name={"featureAutoBurn"}
                  data-plasmic-override={overrides.featureAutoBurn}
                  className={classNames("__wab_instance", sty.featureAutoBurn)}
                />
              </Stack__>
            </div>
          </Section>
          <Section
            data-plasmic-name={"aboutSection"}
            data-plasmic-override={overrides.aboutSection}
            background={"dark"}
            className={classNames("__wab_instance", sty.aboutSection)}
            size={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "mobile"
                : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox___6B3O0)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__bj7D8
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "What people say \nabout us"
                  : "What real Blumemail customers are saying.\n"}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__mcKGs)}>
                <div className={classNames(projectcss.all, sty.freeBox__xSdo)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kxrfr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "339px"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"490px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blumemail_landing_website_new/images/icognitoPrintPng.png",
                      fullWidth: 910,
                      fullHeight: 552,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7AdmB)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__u46BZ
                    )}
                  >
                    {"S**** G****"}
                  </h2>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z5AbB)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dv9SN
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "CEO Company"
                        : "Censored for privacy."}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__javQ)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bvTw2)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "auto"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/blumemail_landing_website_new/images/backtipPng.png",
                        fullWidth: 34,
                        fullHeight: 32,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3IaW7
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                      : "I love the idea of this website and service. The website is clean, easy to use, and the logo is beautiful!"}
                  </div>
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__kLToH)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blumemail_landing_website_new/images/arrowLeftPng.png",
                  fullWidth: 24,
                  fullHeight: 24,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iIsmk)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blumemail_landing_website_new/images/arrowRightPng2.png",
                  fullWidth: 24,
                  fullHeight: 24,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Section>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__yqg7
            )}
          >
            {"      \nDiscover our plans and see which one's right for you."}
          </h1>
          <PriceSection
            data-plasmic-name={"priceSection"}
            data-plasmic-override={overrides.priceSection}
            className={classNames("__wab_instance", sty.priceSection)}
          />

          <Section
            data-plasmic-name={"startSection"}
            data-plasmic-override={overrides.startSection}
            className={classNames("__wab_instance", sty.startSection)}
            size={"fullContentWidth"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cEoiV)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wgaB6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blumemail_landing_website_new/images/pricingImgSvg.svg",
                  fullWidth: 300,
                  fullHeight: 67,
                  aspectRatio: 4.468401
                }}
              />

              <div className={classNames(projectcss.all, sty.columns___2VUoU)}>
                <div className={classNames(projectcss.all, sty.column__oieE7)}>
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Start using our product today"
                      : "Did you like our \nintroduction?"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rl5G
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."
                      : "Blumemail is one of a few email providers that actually cares.\n\n"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__opw2U)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__kDxYd)}
                    color={"white"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__vpkeV)}
                        role={"img"}
                      />
                    }
                    link={"#"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__jcdvQ)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nW4Um
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Get Started"
                        : "Get Blumemail"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>
          </Section>
          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            className={classNames("__wab_instance", sty.pricingSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vZfs7)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__yPnAs)}
              >
                <div className={classNames(projectcss.all, sty.column___80FnY)}>
                  <PriceCard
                    borders={["flatLeft"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__xEk4E
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__htDkP)}>
                  <PriceCard
                    borders={["flatCenter"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__x73H
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ogbzS)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jxK4F
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "We Recommended"
                        : "We Recommended"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__d1D1S)}>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__vb5TV
                    )}
                  />
                </div>
              </Stack__>
            </div>
          </Section>
          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "diagramSection",
    "deviceSection",
    "gallerySection",
    "productSection",
    "featureDomainLink",
    "featureCustomerSupport",
    "featureEmailClient",
    "featureAutoBurn",
    "aboutSection",
    "priceSection",
    "startSection",
    "h3",
    "pricingSection",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar"],
  navbar: ["navbar"],
  diagramSection: ["diagramSection"],
  deviceSection: ["deviceSection"],
  gallerySection: ["gallerySection"],
  productSection: [
    "productSection",
    "featureDomainLink",
    "featureCustomerSupport",
    "featureEmailClient",
    "featureAutoBurn"
  ],
  featureDomainLink: ["featureDomainLink"],
  featureCustomerSupport: ["featureCustomerSupport"],
  featureEmailClient: ["featureEmailClient"],
  featureAutoBurn: ["featureAutoBurn"],
  aboutSection: ["aboutSection"],
  priceSection: ["priceSection"],
  startSection: ["startSection", "h3"],
  h3: ["h3"],
  pricingSection: ["pricingSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  diagramSection: typeof Section;
  deviceSection: typeof Section;
  gallerySection: typeof Section;
  productSection: typeof Section;
  featureDomainLink: typeof FeatureDomainLink;
  featureCustomerSupport: typeof FeatureCustomerSupport;
  featureEmailClient: typeof FeatureEmailClient;
  featureAutoBurn: typeof FeatureAutoBurn;
  aboutSection: typeof Section;
  priceSection: typeof PriceSection;
  startSection: typeof Section;
  h3: "h3";
  pricingSection: typeof Section;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    diagramSection: makeNodeComponent("diagramSection"),
    deviceSection: makeNodeComponent("deviceSection"),
    gallerySection: makeNodeComponent("gallerySection"),
    productSection: makeNodeComponent("productSection"),
    featureDomainLink: makeNodeComponent("featureDomainLink"),
    featureCustomerSupport: makeNodeComponent("featureCustomerSupport"),
    featureEmailClient: makeNodeComponent("featureEmailClient"),
    featureAutoBurn: makeNodeComponent("featureAutoBurn"),
    aboutSection: makeNodeComponent("aboutSection"),
    priceSection: makeNodeComponent("priceSection"),
    startSection: makeNodeComponent("startSection"),
    h3: makeNodeComponent("h3"),
    pricingSection: makeNodeComponent("pricingSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
