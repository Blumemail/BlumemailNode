// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iqYHqr3pWfj21KAZNGZebV
// Component: ZDG0kiEs47Qf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: X0bdkv4xmtEE/component
import TextInput from "../../TextInput"; // plasmic-import: NOrjTyDBFUg5/component
import Select from "../../Select"; // plasmic-import: h50HF9iyKgoV/component
import Checkbox from "../../Checkbox"; // plasmic-import: LpAmBeqBLDyE/component
import FooterSection from "../../FooterSection"; // plasmic-import: pJ7Xt-Q9Heqm/component

import { useScreenVariants as useScreenVariantsd2PrltSkvuJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d2prlt-skvuJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: iqYHqr3pWfj21KAZNGZebV/projectcss
import sty from "./PlasmicSignUp.module.css"; // plasmic-import: ZDG0kiEs47Qf/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: TUKQU3OkVnJX/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: _UjLI5l6sjg-/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: PXprDi05lJam/icon

createPlasmicElementProxy;

export type PlasmicSignUp__VariantMembers = {};
export type PlasmicSignUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignUp__VariantsArgs;
export const PlasmicSignUp__VariantProps = new Array<VariantPropType>();

export type PlasmicSignUp__ArgsType = {};
type ArgPropType = keyof PlasmicSignUp__ArgsType;
export const PlasmicSignUp__ArgProps = new Array<ArgPropType>();

export type PlasmicSignUp__OverridesType = {
  root?: Flex__<"div">;
  mainSection?: Flex__<"div">;
  pageBanner?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  h1?: Flex__<"h1">;
  img?: Flex__<typeof PlasmicImg__>;
  mainSection2?: Flex__<"div">;
  container4?: Flex__<"div">;
  h2?: Flex__<"h2">;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  select?: Flex__<typeof Select>;
  textInput3?: Flex__<typeof TextInput>;
  checkbox?: Flex__<typeof Checkbox>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultSignUpProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUp__RenderFunc(props: {
  variants: PlasmicSignUp__VariantsArgs;
  args: PlasmicSignUp__ArgsType;
  overrides: PlasmicSignUp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blumemail.net"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd2PrltSkvuJ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <Navbar
                data-plasmic-name={"navbar"}
                data-plasmic-override={overrides.navbar}
                className={classNames("__wab_instance", sty.navbar)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__gqoqv)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__wnCkp)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__xGswS)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dSz6S)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Sign Up"}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cSq5
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                        }
                      </div>
                    </Stack__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__dzFdM)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "lazy"
                          : "lazy"
                      }
                      src={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              src: "/plasmic/blumemail_landing_website_new/images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashJpg.jpg",
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                          : {
                              src: "/plasmic/blumemail_landing_website_new/images/tiffanyTertipesNxcs8Wwj9J0UnsplashJpg.jpg",
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                      }
                    />
                  </div>
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.columns__tonhp)}>
                <div className={classNames(projectcss.all, sty.column__a0Q3H)}>
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Regain your independence."}
                    </h2>
                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__t93VM
                      )}
                    >
                      {"Name"}
                    </label>
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      endIcon={
                        <CheckSvgIcon
                          className={classNames(projectcss.all, sty.svg__dftQo)}
                          role={"img"}
                        />
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateTextInputValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["textInput", "value"]
                                  },
                                  operation: 0
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTextInputValue"] != null &&
                            typeof $steps["updateTextInputValue"] ===
                              "object" &&
                            typeof $steps["updateTextInputValue"].then ===
                              "function"
                          ) {
                            $steps["updateTextInputValue"] = await $steps[
                              "updateTextInputValue"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={" Jane Doe"}
                      startIcon={
                        <SearchSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4PHhH
                          )}
                          role={"img"}
                        />
                      }
                      type={"text"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__vir1V
                      )}
                    >
                      {"Email"}
                    </label>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r7Wco)}
                    >
                      <TextInput
                        data-plasmic-name={"textInput2"}
                        data-plasmic-override={overrides.textInput2}
                        className={classNames("__wab_instance", sty.textInput2)}
                        endIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dndYc
                            )}
                            role={"img"}
                          />
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={" example"}
                        startIcon={
                          <SearchSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uxTuh
                            )}
                            role={"img"}
                          />
                        }
                        type={"text"}
                        value={
                          generateStateValueProp($state, [
                            "textInput2",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <Select
                        data-plasmic-name={"select"}
                        data-plasmic-override={overrides.select}
                        className={classNames("__wab_instance", sty.select)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null }
                          ];
                          __composite["0"]["value"] = "blumemail.net";
                          __composite["0"]["label"] = "@blumemail.net";
                          __composite["1"]["value"] = "autismmail.com";
                          __composite["1"]["label"] = "@autismmail.com";
                          return __composite;
                        })()}
                        value={generateStateValueProp($state, [
                          "select",
                          "value"
                        ])}
                      />
                    </div>
                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label___51TyW
                      )}
                    >
                      {"Password"}
                    </label>
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      className={classNames("__wab_instance", sty.textInput3)}
                      endIcon={
                        <CheckSvgIcon
                          className={classNames(projectcss.all, sty.svg__mrYwY)}
                          role={"img"}
                        />
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"***********"}
                      startIcon={
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__bl5Vt)}
                          role={"img"}
                        />
                      }
                      type={"password"}
                      value={
                        generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1DkTf
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "I understand that this form is \nstoring my submitted information \nso I can be contacted."
                        ) : (
                          <React.Fragment>
                            <React.Fragment>
                              {"I agree with Blumemail's Terms of Use and "}
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link__kA8FM
                                )}
                                component={Link}
                                href={"w"}
                                platform={"nextjs"}
                              >
                                {"Privacy Policy."}
                              </PlasmicLink__>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </Checkbox>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__i3EgI
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["useIntegration"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["useIntegration"] != null &&
                          typeof $steps["useIntegration"] === "object" &&
                          typeof $steps["useIntegration"].then === "function"
                        ) {
                          $steps["useIntegration"] = await $steps[
                            "useIntegration"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__wuJy)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5K31J
                        )}
                      >
                        {"Join us!"}
                      </div>
                      {false ? (
                        <Icon3Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8KGj4
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </div>
                </div>
              </div>
            </div>
            <FooterSection
              data-plasmic-name={"footerSection"}
              data-plasmic-override={overrides.footerSection}
              className={classNames("__wab_instance", sty.footerSection)}
            />
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainSection",
    "pageBanner",
    "navbar",
    "h1",
    "img",
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "select",
    "textInput3",
    "checkbox",
    "footerSection"
  ],
  mainSection: [
    "mainSection",
    "pageBanner",
    "navbar",
    "h1",
    "img",
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "select",
    "textInput3",
    "checkbox",
    "footerSection"
  ],
  pageBanner: ["pageBanner", "navbar", "h1", "img"],
  navbar: ["navbar"],
  h1: ["h1"],
  img: ["img"],
  mainSection2: [
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "select",
    "textInput3",
    "checkbox"
  ],
  container4: [
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "select",
    "textInput3",
    "checkbox"
  ],
  h2: ["h2"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  select: ["select"],
  textInput3: ["textInput3"],
  checkbox: ["checkbox"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainSection: "div";
  pageBanner: "div";
  navbar: typeof Navbar;
  h1: "h1";
  img: typeof PlasmicImg__;
  mainSection2: "div";
  container4: "div";
  h2: "h2";
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  select: typeof Select;
  textInput3: typeof TextInput;
  checkbox: typeof Checkbox;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUp__VariantsArgs;
    args?: PlasmicSignUp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignUp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignUp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignUp__ArgProps,
          internalVariantPropNames: PlasmicSignUp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUp";
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mainSection: makeNodeComponent("mainSection"),
    pageBanner: makeNodeComponent("pageBanner"),
    navbar: makeNodeComponent("navbar"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    mainSection2: makeNodeComponent("mainSection2"),
    container4: makeNodeComponent("container4"),
    h2: makeNodeComponent("h2"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    select: makeNodeComponent("select"),
    textInput3: makeNodeComponent("textInput3"),
    checkbox: makeNodeComponent("checkbox"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignUp;
/* prettier-ignore-end */
